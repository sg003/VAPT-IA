import React, { useEffect } from 'react';
import axios from 'axios';
import { url, c_url } from '../Global/URL';

const FakePage = () => {
  useEffect(() => {
    const modifyToken = () => {
      const accessToken = localStorage.getItem('accessToken');
      if (accessToken) {
        try {
          const decodedToken = parseJwt(accessToken);
          decodedToken.userType = 'admin'; // Modify user type
          const modifiedToken = JSON.stringify(decodedToken);
          console.log(modifiedToken);

          // Encode the modified token back into a JWT token (not fully valid without original header and signature)
          const encodedToken = encodeJwt(accessToken, modifiedToken);
          // Store the encoded token back into localStorage
          localStorage.setItem('accessToken', encodedToken);
        } catch (error) {
          console.error('Error decoding or modifying token:', error);
        }
      }
    };

    modifyToken();
  }, []); // Empty dependency array ensures the effect runs only once after component mount

  // Function to parse JWT token
  const parseJwt = (token) => {
    const base64Url = token.split('.')[1];
    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
    return JSON.parse(atob(base64));
  };

  // Function to encode payload into JWT token (not fully valid without original header and signature)
  const encodeJwt = (accessToken, newPayload) => {
    const [header, payload, signature] = accessToken.split('.');
    const base64NewPayload = btoa(JSON.stringify(newPayload));
    const modifiedAccessToken = `${header}.${base64NewPayload}.${signature}`;
    
    return modifiedAccessToken;
};


  return (
    <div>
      {/* Optional: You can add UI elements here */}
    </div>
  );
};

export default FakePage;
